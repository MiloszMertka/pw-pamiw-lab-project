@inherits LayoutComponentBase

@using Blazored.LocalStorage;
@using System.Security.Claims;

@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<MainLayout> Loc

<MudThemeProvider @bind-IsDarkMode="isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@DrawerToggle" />
        <MudText Typo="Typo.h6" Class="mr-8">DreamCars</MudText>
        <CultureSelector />
        <MudSwitch T="bool" Checked="isDarkMode"
            CheckedChanged="darkModePreference => ChangeDarkModePreference(darkModePreference)"
            ThumbIcon="@(isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
            ThumbIconColor="Color.Primary" Class="ml-8">
            @Loc["Theme"]</MudSwitch>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudButton Color="Color.Inherit" OnClick="@Logout">@Loc["Logout"]</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Color="Color.Inherit" Href="/register">@Loc["Register"]</MudButton>
                <MudButton Color="Color.Inherit" Href="/login">@Loc["Login"]</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">DreamCars</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="pt-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool drawerOpen = false;
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        isDarkMode = await LocalStorageService.GetItemAsync<bool>("isDarkMode");
    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private async Task ChangeDarkModePreference(bool darkModePreference)
    {
        await LocalStorageService.SetItemAsync("isDarkMode", darkModePreference);
        isDarkMode = darkModePreference;
    }

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await LocalStorageService.RemoveItemAsync("googleToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/login");
    }
}
