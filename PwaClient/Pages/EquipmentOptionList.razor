@page "/equipment-options"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStringLocalizer<EquipmentOptionList> Loc

@attribute [Authorize]

<PageTitle>@Loc["Equipment Options"]</PageTitle>

@if (equipmentOptions == null)
{
    <LoadingIndicator />
}
else
{
    <div class="d-flex justify-space-between align-center">
    <MudText Typo="Typo.h3" Class="mb-4">@Loc["Equipment"]</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="CreateEquipmentOption">@Loc["Create Equipment Option"]
    </MudButton>
</div>
    <MudDataGrid Items="@equipmentOptions" ReadOnly="true">
        <Columns>
            <HierarchyColumn T="EquipmentOption" />
            <PropertyColumn Property="equipmentOption => equipmentOption.Name" Title="@(@Loc["Name"])" />
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary"
                        @onclick="() => EditEquipmentOption(context.Item.Id.GetValueOrDefault())">@Loc["Edit"]</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error"
                        @onclick="() => DeleteEquipmentOption(context.Item.Id.GetValueOrDefault())">@Loc["Delete"]</MudButton>
                </MudCardActions>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="EquipmentOption" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<EquipmentOption>? equipmentOptions;

    protected override async Task OnInitializedAsync()
    {
        equipmentOptions = await HttpClient.GetFromJsonAsync<List<EquipmentOption>>("api/equipment-options");
    }

    private async Task DeleteEquipmentOption(long id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(equipmentOption => equipmentOption.ContentText, Loc["Do you really want to delete this record? This process cannot be undone."]);
        parameters.Add(equipmentOption => equipmentOption.ButtonText, Loc["Delete"]);
        parameters.Add(equipmentOption => equipmentOption.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Dialog>(Loc["Delete Equipment Option"], parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        equipmentOptions = null;
        await HttpClient.DeleteAsync($"api/equipment-options/{id}");
        equipmentOptions = await HttpClient.GetFromJsonAsync<List<EquipmentOption>>("api/equipment-options");
    }

    private void EditEquipmentOption(long id)
    {
        NavigationManager.NavigateTo($"/equipment-options/edit/{id}");
    }

    private void CreateEquipmentOption()
    {
        NavigationManager.NavigateTo("/equipment-options/create");
    }
}
