@page "/engines/create"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CreateEngineForm> Loc

@attribute [Authorize]

<PageTitle>@Loc["Create Engine"]</PageTitle>

<ResourceForm Title="@(@Loc["Create Engine"])" Model="engineForm" OnValidSubmit="SubmitForm" OnCancel="CancelForm"
    IsSubmitting="isSubmitting">
    <MudTextField Label="@(@Loc["Name"])" @bind-Value="engineForm.Name" For="@(() => engineForm.Name)" />
    <MudTextField Label="@(@Loc["Horse Power"])" @bind-Value="engineForm.HorsePower"
        For="@(() => engineForm.HorsePower)" />
</ResourceForm>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Error" Class="mt-4">@message</MudAlert>
}

@code {
    private EngineForm engineForm = new EngineForm();
    string message = string.Empty;
    private bool isSubmitting;

    private void CancelForm()
    {
        NavigationManager.NavigateTo("/engines");
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        message = string.Empty;
        var engine = new Engine(engineForm.Name, engineForm.HorsePower.GetValueOrDefault());
        var result = await HttpClient.PostAsJsonAsync("api/engines", engine);

        if (!result.IsSuccessStatusCode)
        {
            message = Loc["Something went wrong"];
            isSubmitting = false;
            return;
        }

        NavigationManager.NavigateTo("/engines");
        isSubmitting = false;
    }
}
