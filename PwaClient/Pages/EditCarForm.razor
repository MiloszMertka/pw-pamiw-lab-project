@page "/cars/edit/{id:long}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<EditCarForm> Loc

@attribute [Authorize]

<PageTitle>@Loc["Edit Car"]</PageTitle>

@if (engines == null || equipmentOptions == null)
{
    <LoadingIndicator />
}
else
{
    <ResourceForm Title="@(@Loc["Edit Car"])" Model="carForm" OnValidSubmit="SubmitForm" OnCancel="CancelForm"
    IsSubmitting="isSubmitting">
    <MudTextField Label="@(@Loc["Name"])" @bind-Value="carForm.Name" For="@(() => carForm.Name)" />
    <MudTextField Label="@(@Loc["Color"])" @bind-Value="carForm.Color" For="@(() => carForm.Color)" />
    <MudSelect T="long?" Label="@(@Loc["Engine"])" AnchorOrigin="Origin.BottomCenter" @bind-Value="carForm.EngineId"
        For="@(() => carForm.EngineId)">
        @foreach (var engine in engines)
            {
                <MudSelectItem T="long?" Value="engine.Id.GetValueOrDefault()">@engine.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Label="@(@Loc["Equipment Options"])" MultiSelection="true" @bind-Value="equipmentOptionsValue"
            For="@(() => equipmentOptionsValue)">
            @foreach (var equipmentOption in equipmentOptions)
            {
                <MudSelectItem T="string" Value="equipmentOption.Name">
                    @equipmentOption.Name
                </MudSelectItem>
            }
        </MudSelect>
    </ResourceForm>
}

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Error" Class="mt-4">@message</MudAlert>
}

@code {
    [Parameter]
    public long id { get; set; }

    private CarForm carForm = new CarForm();
    private List<Engine>? engines;
    private List<EquipmentOption>? equipmentOptions;
    private string equipmentOptionsValue;
    string message = string.Empty;
    private bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        var car = await HttpClient.GetFromJsonAsync<Car>($"api/cars/{id}");
        carForm.Name = car.Name;
        carForm.Color = car.Color;
        carForm.EngineId = car.Engine.Id.GetValueOrDefault();
        carForm.EquipmentOptionsIds = car.EquipmentOptions.Select(equipmentOption =>
        equipmentOption.Id.GetValueOrDefault()).ToArray();

        engines = await HttpClient.GetFromJsonAsync<List<Engine>>("api/engines");
        equipmentOptions = await HttpClient.GetFromJsonAsync<List<EquipmentOption>>("api/equipment-options");
    }

    private void CancelForm()
    {
        NavigationManager.NavigateTo("/cars");
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        message = string.Empty;
        ConvertEquipmentOptionsValue();
        var carEngine = engines.First<Engine>(engine => engine.Id == carForm.EngineId);
        var carEquipmentOptions = equipmentOptions.Where(equipmentOption =>
        carForm.EquipmentOptionsIds.ToList().Contains(equipmentOption.Id.GetValueOrDefault())).ToList();

        var car = new Car(carForm.Name, carForm.Color, carEngine, carEquipmentOptions);
        car.Id = id;
        var result = await HttpClient.PutAsJsonAsync($"api/cars/{id}", car);

        if (!result.IsSuccessStatusCode)
        {
            message = Loc["Something went wrong"];
            isSubmitting = false;
            return;
        }

        NavigationManager.NavigateTo("/cars");
        isSubmitting = false;
    }

    private void ConvertEquipmentOptionsValue()
    {
        carForm.EquipmentOptionsIds = equipmentOptionsValue.Split(",")
        .Select(equipmentOptionValue => equipmentOptions.First(equipmentOption => equipmentOption.Name.Trim() ==
        equipmentOptionValue.Trim()).Id.GetValueOrDefault())
        .ToArray();
    }
}
