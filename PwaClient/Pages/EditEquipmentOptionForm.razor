@page "/equipment-options/edit/{id:long}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<EditEquipmentOptionForm> Loc

@attribute [Authorize]

<PageTitle>@Loc["Edit Equipment Option"]</PageTitle>

<ResourceForm Title="@(@Loc["Edit Equipment Option"])" Model="equipmentOptionForm" OnValidSubmit="SubmitForm"
    OnCancel="CancelForm" IsSubmitting="isSubmitting">
    <MudTextField Label="@(@Loc["Name"])" @bind-Value="equipmentOptionForm.Name"
        For="@(() => equipmentOptionForm.Name)" />
</ResourceForm>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Error" Class="mt-4">@message</MudAlert>
}

@code {
    [Parameter]
    public long id { get; set; }

    private EquipmentOptionForm equipmentOptionForm = new EquipmentOptionForm();
    string message = string.Empty;
    private bool isSubmitting;

    private void CancelForm()
    {
        NavigationManager.NavigateTo("/equipment-options");
    }

    protected override async Task OnInitializedAsync()
    {
        var equipmentOption = await HttpClient.GetFromJsonAsync<EquipmentOption>($"api/equipment-options/{id}");
        equipmentOptionForm.Name = equipmentOption.Name;
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        message = string.Empty;
        var equipmentOption = new EquipmentOption(equipmentOptionForm.Name);
        equipmentOption.Id = id;
        var result = await HttpClient.PutAsJsonAsync($"api/equipment-options/{id}", equipmentOption);

        if (!result.IsSuccessStatusCode)
        {
            message = Loc["Something went wrong"];
            isSubmitting = false;
            return;
        }

        NavigationManager.NavigateTo("/equipment-options");
        isSubmitting = false;
    }
}
