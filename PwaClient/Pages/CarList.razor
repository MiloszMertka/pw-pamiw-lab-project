@page "/cars"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStringLocalizer<CarList> Loc

@attribute [Authorize]

<PageTitle>@Loc["Cars"]</PageTitle>

@if (cars == null)
{
    <LoadingIndicator />
}
else
{
    <div class="d-flex justify-space-between align-center">
    <MudText Typo="Typo.h3" Class="mb-4">@Loc["Cars"]</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="CreateCar">@Loc["Create Car"]</MudButton>
</div>
    <MudDataGrid Items="@cars" ReadOnly="true">
        <Columns>
            <HierarchyColumn T="Car" />
            <PropertyColumn Property="car => car.Name" Title="@(@Loc["Name"])" />
            <PropertyColumn Property="car => car.Color" Title="@(@Loc["Color"])" />
            <PropertyColumn Property="@(car => $"{car.Engine.Name} {car.Engine.HorsePower.ToString()} HP")"
                Title="@(@Loc["Engine"])" />
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@Loc["Color"]: @context.Item.Color</MudText>
                    <MudText>@Loc["Engine"]: @context.Item.Engine.Name @context.Item.Engine.HorsePower.ToString() HP
                    </MudText>
                    @if (context.Item.EquipmentOptions.Count > 0)
                    {
                        <MudText>@Loc["Equipment Options"]:</MudText>
                        @foreach (var option in context.Item.EquipmentOptions)
                        {
                            <MudText>- @option.Name</MudText>
                        }
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary"
                        @onclick="() => EditCar(context.Item.Id.GetValueOrDefault())">@Loc["Edit"]</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error"
                        @onclick="() => DeleteCar(context.Item.Id.GetValueOrDefault())">@Loc["Delete"]</MudButton>
                </MudCardActions>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Car" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<Car>? cars;

    protected override async Task OnInitializedAsync()
    {
        cars = await HttpClient.GetFromJsonAsync<List<Car>>("api/cars");
    }

    private async Task DeleteCar(long id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(car => car.ContentText, Loc["Do you really want to delete this record? This process cannot be undone."]);
        parameters.Add(car => car.ButtonText, Loc["Delete"]);
        parameters.Add(car => car.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<Dialog>(Loc["Delete Car"], parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        cars = null;
        await HttpClient.DeleteAsync($"api/cars/{id}");
        cars = await HttpClient.GetFromJsonAsync<List<Car>>("api/cars");
    }

    private void EditCar(long id)
    {
        NavigationManager.NavigateTo($"/cars/edit/{id}");
    }

    private void CreateCar()
    {
        NavigationManager.NavigateTo("/cars/create");
    }
}
